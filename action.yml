name: "Cloudron Deploy"
description: "Deploy a Docker image to Cloudron"
branding:
  icon: "upload-cloud"
  color: "blue"
author: "Ross MacLean"
inputs:
  image:
    description: "Docker image to be deployed to Cloudron"
    required: true
  app-domain:
    description: "Domain where the app should be installed/updated in Cloudron e.g. myapp.server.com"
    required: true
  cloudron-server:
    description: "Cloudron server e.g. my.server.com"
    required: true
  cloudron-token:
    description: "Cloudron auth token"
    required: true
  install-if-missing:
    description: "Should the app be installed if not currently? False results in using update only."
    required: false
    default: "false"
  skip-backup:
    description: "When true, the app will not be backup up when updating."
    required: false
    default: "false"
  environment:
    description: "Environment variables to be set in format `KEY1=Val1 KEY2=Val2`. Note that this does not clear currently set environment variables which are not overwritten."
    required: false
    default: "NONE"
  registry:
    description: "Docker registry URL"
    required: false
    default: "docker.io"
runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install Cloudron CLI
      run: npm i -g cloudron
      shell: bash
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install/Update App
      run: python ${{ github.action_path }}/installOrUpdate.py --docker-image "${{ inputs.image }}" --app-domain "${{ inputs.app-domain }}" --cloudron-server "${{ inputs.cloudron-server }}" --cloudron-token "${{ inputs.cloudron-token }}" --install-if-missing "${{ inputs.install-if-missing }}" --skip-backup "${{ inputs.skip-backup }}" --env-vars "${{ inputs.environment }}" --registry "${{ inputs.registry }}"
      shell: bash
